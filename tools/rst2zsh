#! /bin/zsh -f

setopt err_exit no_unset warn_create_global

zmodload -F zsh/zutil +b:zparseopts

# • ``^::$``
#       Literal block, which for the sake of this repo is always zsh
# • ``^\.\. code:: zsh``
#       zsh code block
# • ``^[^\. ][^\.].*::$``
#       Implied code block via ``::`` suffixed line, skipping lines that are
#       reST directives
start_block='^(::|\.\. code:: zsh|[^\. ][^\.].*::)$'


parse() {
    local input=$1 output=$2
    local _RST2HTML_recursing=${_RST2HTML_recursing:-0}
    (( $_RST2HTML_recursing )) || : >| $output
    integer in_block=0 in_toctree=0 line_nr=1
    local indent_prefix=""
    local line match mbegin mend
    while IFS='' read -r line; do
        (( line_nr++ ))
        if [[ $line =~ '^.. include:: (.*)' ]] {
            includes+=(${input:h}/$match)
            _RST2HTML_recursing=1 parse ${input:h}/$match $output
        } elif [[ $line =~ '^.. toctree::' ]] {
            in_toctree=1
        } elif (( $in_toctree )) && [[ $line =~ '^[[:space:]]+([^ :].*)' ]] {
            # Indented line within toctree, extract filename
            includes+=(${input:h}/$match[1].rst)
            _RST2HTML_recursing=1 parse ${input:h}/$match[1].rst $output
        } elif [[ $line =~ $start_block ]] {
            (( ++block_count))
            in_block=1
            in_toctree=0
            indent_prefix="" # Reset indent for the new block
            # Add source map, but not if we're at the very start of a non-recursive call.
            # The first line of the output file might be a shebang.
            if [[ -s $output ]] {
                echo "# $input:$line_nr" >> $output
            }
        } elif [[ $line =~ '^[^ ]' ]] {
            in_block=0
            in_toctree=0
        } elif (( $in_block )) && [[ -n $line ]] {
            if [[ -z $indent_prefix ]] {
                # Capture the indentation of the first line of the block.
                [[ $line =~ '^([[:space:]]+)' ]] && indent_prefix=$match[1]
            }

            # Remove the captured indentation prefix from the line.
            echo -E "${line#$indent_prefix}" >> $output
        }
    done < $input
    if ! (( $_RST2HTML_recursing )) {
        if [[ ! -s $output ]] {
            print -u2 "Warning: No Zsh code blocks found in '$input'"
        } else {
            print -u2 "Extracted $block_count Zsh code blocks to '$output'"
        }
    }
}


typeset -A args
zparseopts -D -K -E -A args d: h

if [[ -n ${args[(I)-h]} ]] {
    print -P "Usage: %B$0%b [option…] <input> <output>"
    echo "Options:"
    echo "    -d <file>  File to write dependencies to"
    echo "    -h         This message"
    exit 0
} elif [[ -z ${1:-} ]] {
    echo "Error: No input given"
    exit 2
} elif [[ -z ${2:-} ]] {
    echo "Error: No output given"
    exit 2
}

typeset -U includes=()
integer block_count=0
parse $1 $2

[[ -n ${args[(I)-d]} ]] && echo $2: $0 $1 $includes >| ${args[-d]}

:
